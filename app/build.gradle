apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

def getLocalVersionBuildNumber() {
    def versionPropsFile = file('version.properties')

    /*Setting default value for versionBuild which is the last incremented value stored in the file */
    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        return versionProps['VERSION_BUILD'].toInteger()
    } else {
        return -1
    }
}

def addLocalVersionBuildNumber() {
    def versionPropsFile = file('version.properties')
    def versionBuild

    /*Setting default value for versionBuild which is the last incremented value stored in the file */
    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        versionBuild = versionProps['VERSION_BUILD'].toInteger() + 1
        versionProps['VERSION_BUILD'] = versionBuild.toString()
        versionProps.store(versionPropsFile.newWriter(), null)
    } else {
        return -1
    }
}

android {
    addLocalVersionBuildNumber()

    def versionPropsFile = file('version.properties')
    def versionBuild

    /*Setting default value for versionBuild which is the last incremented value stored in the file */
    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        versionBuild = versionProps['VERSION_BUILD'].toInteger()
    } else {
        throw new FileNotFoundException("Could not read version.properties!")
    }

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    defaultConfig {
        applicationId "tw.android.test"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0." + versionBuild
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled = true
    }
}

ext {
    // App dependencies
    supportLibVersion = '25.3.1'
    constraintVersion = '1.0.2'
    butterKnifeVersion = '8.8.1'
    lomBokVersion = '1.16.18'
    ultimaterecyclerviewVersion = '0.7.2'
    baseRecyclerViewAdapterHelperVersion = '2.9.28'
    flexboxVersion = '0.3.0'
    guavaVersion = '18.0'

    // Unit test
    junitVersion = '4.12'
    espressoVersion = '2.2.2'
    mockitoVersion = '1.10.19'
    powerMockito = '1.6.2'
    hamcrestVersion = '1.3'

    // swagger dependencies version
    oltu_version = "1.0.1"
    retrofit_version = "2.3.0"
    swagger_annotations_version = "1.5.15"
    junit_version = "4.12"
    rx_java_version = "2.1.1"
    threetenbp_version = "1.3.5"
    json_fire_version = "1.8.0"
    // end of swagger dependencies version

    dagger_version = "2.8"
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "com.android.support:appcompat-v7:${supportLibVersion}"
    compile "com.android.support:support-v13:${supportLibVersion}"
    compile "com.android.support:support-v4:${supportLibVersion}"
    compile "com.android.support:design:${supportLibVersion}"
    compile "com.android.support:cardview-v7:${supportLibVersion}"
    compile "com.android.support:recyclerview-v7:${supportLibVersion}"
    compile "com.android.support:transition:${supportLibVersion}"
    compile "com.android.support:percent:${supportLibVersion}"
    compile "com.android.support:support-annotations:${supportLibVersion}"
    compile "com.android.support.constraint:constraint-layout:${constraintVersion}"
    compile "com.google.android:flexbox:${flexboxVersion}"
    compile "com.google.guava:guava:${guavaVersion}"
    compile 'com.google.code.gson:gson:2.8.2'
    compile 'com.android.support:multidex:1.0.1'

    compile "org.projectlombok:lombok:${lomBokVersion}"

    compile "com.jakewharton:butterknife:${butterKnifeVersion}"
    annotationProcessor "com.jakewharton:butterknife-compiler:${butterKnifeVersion}"
    compile "com.marshalchen.ultimaterecyclerview:library:${ultimaterecyclerviewVersion}"
    compile "com.github.CymChad:BaseRecyclerViewAdapterHelper:${baseRecyclerViewAdapterHelperVersion}"
    compile 'com.afollestad.material-dialogs:commons:0.9.3.0'

    //test
    androidTestCompile("com.android.support.test.espresso:espresso-core:${espressoVersion}", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    // Dependencies for local unit tests
    testCompile "junit:junit:${junitVersion}"
    testCompile "org.mockito:mockito-all:${mockitoVersion}"
    testCompile "org.hamcrest:hamcrest-all:${hamcrestVersion}"

    // Support OffsetDateTime
//    compile 'com.jakewharton.threetenabp:threetenabp:1.0.5'

    // OffsetDateTime
    compile "org.threeten:threetenbp:$threetenbp_version"

    // RxJava2
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
    compile 'com.jakewharton.rxbinding2:rxbinding:2.0.0'
    compile 'com.tbruyelle.rxpermissions2:rxpermissions:0.8.2@aar'

    compile "com.squareup.retrofit2:retrofit:$retrofit_version"
    compile "com.squareup.retrofit2:converter-scalars:$retrofit_version"
    compile "com.squareup.retrofit2:converter-gson:$retrofit_version"
    compile "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"
    compile "io.reactivex.rxjava2:rxjava:$rx_java_version"

    // Log
    compile 'com.orhanobut:logger:2.1.1'

    testCompile "org.powermock:powermock-module-junit4:1.6.2"
    testCompile "org.powermock:powermock-module-junit4-rule:1.6.2"
    testCompile "org.powermock:powermock-api-mockito:1.6.2"
    testCompile "org.powermock:powermock-classloading-xstream:1.6.2"

    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
}
